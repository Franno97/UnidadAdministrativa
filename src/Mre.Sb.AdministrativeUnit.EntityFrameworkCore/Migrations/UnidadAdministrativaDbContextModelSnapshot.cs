// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mre.Sb.AdministrativeUnit.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;

namespace Mre.Sb.AdministrativeUnit.Migrations
{
    [DbContext(typeof(UnidadAdministrativaDbContext))]
    partial class UnidadAdministrativaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Arancel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("MonedaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("MonedaId");

                    b.ToTable("Arancel");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Banco", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Banco");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Cargo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.ConfiguracionSignatario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Extension")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("NombreArchivo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TipoContenido")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("ConfiguracionSignatario");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Convenio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("Id");

                    b.ToTable("Convenio");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.EntidadAuspiciante", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("EntidadAuspiciante");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Exoneracion", b =>
                {
                    b.Property<Guid>("ConvenioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Discapacitado")
                        .HasColumnType("bit");

                    b.Property<int?>("EdadFinal")
                        .HasColumnType("int");

                    b.Property<int?>("EdadInicial")
                        .HasColumnType("int");

                    b.Property<string>("EntidadAuspicianteId")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("PaisId")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("TipoExoneracionId")
                        .IsRequired()
                        .HasColumnType("varchar(4)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ConvenioId", "ServicioId");

                    b.HasIndex("EntidadAuspicianteId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("TipoExoneracionId");

                    b.HasIndex("ConvenioId", "ServicioId");

                    b.ToTable("Exoneracion");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.JerarquiaArancelaria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArancelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("NumeroJerarquia")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("TipoArancelId")
                        .IsRequired()
                        .HasColumnType("varchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("ArancelId");

                    b.HasIndex("TipoArancelId");

                    b.ToTable("JerarquiaArancelaria");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Jurisdiccion", b =>
                {
                    b.Property<Guid>("UnidadAdministrativaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("UnidadAdministrativaId", "Ciudad");

                    b.ToTable("Jurisdiccion");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Libro", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Libro");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Moneda", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Simbolo")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.ToTable("Moneda");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Nivel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Nivel");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.PartidaArancelaria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<Guid>("JerarquiaArancelariaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("NumeroPartida")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("JerarquiaArancelariaId");

                    b.ToTable("PartidaArancelaria");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.PartidaArancelariaServicio", b =>
                {
                    b.Property<Guid>("PartidaArancelariaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PartidaArancelariaId", "ServicioId");

                    b.HasIndex("PartidaArancelariaId", "ServicioId");

                    b.ToTable("PartidaArancelariaServicio");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.SecuencialLibro", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("LibroId")
                        .IsRequired()
                        .HasColumnType("varchar(4)");

                    b.Property<int>("NumeroPaginaPorVolumen")
                        .HasColumnType("int");

                    b.Property<Guid>("ServicioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SiguientePagina")
                        .HasColumnType("int");

                    b.Property<Guid>("UnidadAdministrativaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VolumenActual")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibroId");

                    b.ToTable("SecuencialLibro");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Servicio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool>("AtencionPresencial")
                        .HasColumnType("bit");

                    b.Property<bool>("AtencionSemiPresencial")
                        .HasColumnType("bit");

                    b.Property<bool>("AtencionVirtual")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("TipoServicioId")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("TipoServicioId");

                    b.ToTable("Servicio");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Signatario", b =>
                {
                    b.Property<Guid>("UnidadAdministrativaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PorDefecto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("UnidadAdministrativaId", "UsuarioId", "ServicioId");

                    b.HasIndex("UnidadAdministrativaId", "UsuarioId", "ServicioId");

                    b.ToTable("Signatario");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.TipoArancel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoArancel");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.TipoAtencion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoAtencion");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.TipoCuentaBancaria", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoCuentaBancaria");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.TipoExoneracion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoExoneracion");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.TipoPago", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoPago");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.TipoServicio", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoServicio");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.TipoUnidadAdministrativa", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoUnidadAdministrativa");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativa", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("BancoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<Guid?>("DependenciaAdministrativaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Direccion")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("FechaFinOperacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicioOperacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<Guid?>("JefeMisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("MonedaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("NivelId")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("NumeroCuentaBancaria")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaisId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Siglas")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("TipoCuentaBancariaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("TipoUnidadAdministrativaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("TitularCuentaBancaria")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("DependenciaAdministrativaId");

                    b.HasIndex("MonedaId");

                    b.HasIndex("NivelId");

                    b.HasIndex("Siglas")
                        .IsUnique();

                    b.HasIndex("TipoCuentaBancariaId");

                    b.HasIndex("TipoUnidadAdministrativaId");

                    b.ToTable("UnidadAdministrativa");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativaFuncionario", b =>
                {
                    b.Property<Guid>("UnidadAdministrativaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CargoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("UnidadAdministrativaId", "UsuarioId");

                    b.HasIndex("CargoId");

                    b.HasIndex("UnidadAdministrativaId", "UsuarioId");

                    b.ToTable("UnidadAdministrativaFuncionario");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativaServicio", b =>
                {
                    b.Property<Guid>("UnidadAdministrativaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("TipoPagoId")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.HasKey("UnidadAdministrativaId", "ServicioId");

                    b.HasIndex("TipoPagoId");

                    b.HasIndex("UnidadAdministrativaId", "ServicioId");

                    b.ToTable("UnidadAdministrativaServicio");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Ventanilla", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool>("AtencionPresencial")
                        .HasColumnType("bit");

                    b.Property<bool>("AtencionVirtual")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("FinAtencion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InicioAtencion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("UnidadAdministrativaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Ventanilla");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Arancel", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.Moneda", "Moneda")
                        .WithMany()
                        .HasForeignKey("MonedaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Moneda");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Exoneracion", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.Convenio", null)
                        .WithMany("Exoneraciones")
                        .HasForeignKey("ConvenioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.EntidadAuspiciante", "EntidadAuspiciante")
                        .WithMany()
                        .HasForeignKey("EntidadAuspicianteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.Servicio", null)
                        .WithMany()
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.TipoExoneracion", "TipoExoneracion")
                        .WithMany()
                        .HasForeignKey("TipoExoneracionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntidadAuspiciante");

                    b.Navigation("TipoExoneracion");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.JerarquiaArancelaria", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.Arancel", null)
                        .WithMany("Jerarquias")
                        .HasForeignKey("ArancelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.TipoArancel", "TipoArancel")
                        .WithMany()
                        .HasForeignKey("TipoArancelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoArancel");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Jurisdiccion", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativa", null)
                        .WithMany("Jurisdiccion")
                        .HasForeignKey("UnidadAdministrativaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.PartidaArancelaria", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.JerarquiaArancelaria", null)
                        .WithMany("Partidas")
                        .HasForeignKey("JerarquiaArancelariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.PartidaArancelariaServicio", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.PartidaArancelaria", null)
                        .WithMany("Servicios")
                        .HasForeignKey("PartidaArancelariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.SecuencialLibro", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.Libro", "Libro")
                        .WithMany()
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Servicio", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.TipoServicio", "TipoServicio")
                        .WithMany()
                        .HasForeignKey("TipoServicioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoServicio");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Signatario", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativa", null)
                        .WithMany("Signatarios")
                        .HasForeignKey("UnidadAdministrativaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativa", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativa", "DependenciaAdministrativa")
                        .WithMany()
                        .HasForeignKey("DependenciaAdministrativaId");

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.Moneda", "Moneda")
                        .WithMany()
                        .HasForeignKey("MonedaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("NivelId");

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.TipoCuentaBancaria", "TipoCuentaBancaria")
                        .WithMany()
                        .HasForeignKey("TipoCuentaBancariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.TipoUnidadAdministrativa", "TipoUnidadAdministrativa")
                        .WithMany()
                        .HasForeignKey("TipoUnidadAdministrativaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Banco");

                    b.Navigation("DependenciaAdministrativa");

                    b.Navigation("Moneda");

                    b.Navigation("Nivel");

                    b.Navigation("TipoCuentaBancaria");

                    b.Navigation("TipoUnidadAdministrativa");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativaFuncionario", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativa", null)
                        .WithMany("Funcionarios")
                        .HasForeignKey("UnidadAdministrativaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cargo");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativaServicio", b =>
                {
                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.TipoPago", "TipoPago")
                        .WithMany()
                        .HasForeignKey("TipoPagoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativa", null)
                        .WithMany("Servicios")
                        .HasForeignKey("UnidadAdministrativaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoPago");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Arancel", b =>
                {
                    b.Navigation("Jerarquias");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.Convenio", b =>
                {
                    b.Navigation("Exoneraciones");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.JerarquiaArancelaria", b =>
                {
                    b.Navigation("Partidas");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.PartidaArancelaria", b =>
                {
                    b.Navigation("Servicios");
                });

            modelBuilder.Entity("Mre.Sb.UnidadAdministrativa.Dominio.UnidadAdministrativa", b =>
                {
                    b.Navigation("Funcionarios");

                    b.Navigation("Jurisdiccion");

                    b.Navigation("Servicios");

                    b.Navigation("Signatarios");
                });
#pragma warning restore 612, 618
        }
    }
}
